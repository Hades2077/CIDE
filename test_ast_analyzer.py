"""
Test Suite for AST-based Code Similarity Analyzer
Tests detection of disguised plagiarism through various obfuscation techniques.
"""

from ast_analyzer import HybridSimilarityAnalyzer
from code_similarity import CodeSimilarityAnalyzer


def test_renamed_variables():
    """Test detection when variables are renamed."""
    print("=" * 70)
    print("TEST 1: Renamed Variables (Should detect as similar)")
    print("=" * 70)
    
    original = """
def calculate_average(numbers):
    total = 0
    count = len(numbers)
    for num in numbers:
        total += num
    average = total / count
    return average
"""
    
    plagiarized = """
def calculate_average(data):
    sum_val = 0
    length = len(data)
    for value in data:
        sum_val += value
    mean = sum_val / length
    return mean
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(original, plagiarized)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Sequence Similarity: {result['sequence_similarity']:.1%}")
    print(f"Weighted Score (70/30): {result['weighted_percentage']}")
    print(f"Identical Structure: {result['identical_structure']}")
    
    plagiarism = analyzer.detect_plagiarism(original, plagiarized, threshold=0.75)
    print(f"\nüîç Plagiarism Detected: {plagiarism['is_plagiarism']}")
    print(f"   Type: {plagiarism['plagiarism_type']}")
    print(f"   Confidence: {plagiarism['confidence_percentage']}")
    print()


def test_reordered_functions():
    """Test detection when functions are reordered."""
    print("=" * 70)
    print("TEST 2: Reordered Functions (Should still detect similarity)")
    print("=" * 70)
    
    original = """
def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

def multiply(a, b):
    return a * b
"""
    
    plagiarized = """
def multiply(x, y):
    return x * y

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(original, plagiarized)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Weighted Score: {result['weighted_percentage']}")
    print(f"Features Code 1: {result['features1']}")
    print(f"Features Code 2: {result['features2']}")
    
    plagiarism = analyzer.detect_plagiarism(original, plagiarized, threshold=0.70)
    print(f"\nüîç Plagiarism Detected: {plagiarism['is_plagiarism']}")
    print(f"   Type: {plagiarism['plagiarism_type']}")
    print()


def test_added_comments():
    """Test that comments don't affect structural similarity."""
    print("=" * 70)
    print("TEST 3: Added Comments (Should be identical structure)")
    print("=" * 70)
    
    original = """
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)
"""
    
    with_comments = """
def fibonacci(n):
    # Base case: return n if n is 0 or 1
    if n <= 1:
        return n
    # Recursive case: sum of previous two numbers
    return fibonacci(n-1) + fibonacci(n-2)
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(original, with_comments)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Identical Structure: {result['identical_structure']}")
    print(f"Weighted Score: {result['weighted_percentage']}")
    print()


def test_different_implementations():
    """Test that genuinely different code is detected as dissimilar."""
    print("=" * 70)
    print("TEST 4: Different Implementations (Should be dissimilar)")
    print("=" * 70)
    
    code1 = """
def search_linear(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1
"""
    
    code2 = """
def bubble_sort(data):
    n = len(data)
    for i in range(n):
        for j in range(0, n-i-1):
            if data[j] > data[j+1]:
                data[j], data[j+1] = data[j+1], data[j]
    return data
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(code1, code2)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Weighted Score: {result['weighted_percentage']}")
    
    plagiarism = analyzer.detect_plagiarism(code1, code2, threshold=0.70)
    print(f"\nüîç Plagiarism Detected: {plagiarism['is_plagiarism']}")
    print()


def test_control_flow_disguise():
    """Test detection when control flow is slightly modified."""
    print("=" * 70)
    print("TEST 5: Modified Control Flow (Should detect similarity)")
    print("=" * 70)
    
    original = """
def find_max(numbers):
    max_val = numbers[0]
    for num in numbers:
        if num > max_val:
            max_val = num
    return max_val
"""
    
    modified = """
def find_max(data):
    maximum = data[0]
    for value in data:
        if value > maximum:
            maximum = value
    return maximum
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(original, modified)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Identical Structure: {result['identical_structure']}")
    print(f"Weighted Score: {result['weighted_percentage']}")
    
    plagiarism = analyzer.detect_plagiarism(original, modified, threshold=0.75)
    print(f"\nüîç Plagiarism Detected: {plagiarism['is_plagiarism']}")
    print(f"   Type: {plagiarism['plagiarism_type']}")
    print()


def test_comparison_modes():
    """Compare basic vs AST-based analysis."""
    print("=" * 70)
    print("TEST 6: Comparison of Analysis Modes")
    print("=" * 70)
    
    code1 = """
def process_data(items):
    result = []
    for item in items:
        if item > 0:
            result.append(item * 2)
    return result
"""
    
    code2 = """
def process_data(values):
    output = []
    for val in values:
        if val > 0:
            output.append(val * 2)
    return output
"""
    
    analyzer = CodeSimilarityAnalyzer()
    
    # Basic mode
    basic_result = analyzer.analyze(code1, code2, mode='basic', language='python')
    print(f"Basic Mode (text-based): {basic_result['similarity_percentage']}")
    
    # Hybrid mode (AST + sequence)
    hybrid_result = analyzer.analyze(code1, code2, mode='hybrid', language='python')
    print(f"Hybrid Mode (70% structure + 30% sequence): {hybrid_result['weighted_percentage']}")
    print(f"  - Structure: {hybrid_result['structure_similarity']:.1%}")
    print(f"  - Sequence: {hybrid_result['sequence_similarity']:.1%}")
    print(f"  - Identical structure: {hybrid_result['identical_structure']}")
    print()


def test_class_similarity():
    """Test similarity detection for class-based code."""
    print("=" * 70)
    print("TEST 7: Class-based Code Similarity")
    print("=" * 70)
    
    original = """
class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height
    
    def perimeter(self):
        return 2 * (self.width + self.height)
"""
    
    renamed = """
class Rectangle:
    def __init__(self, w, h):
        self.w = w
        self.h = h
    
    def area(self):
        return self.w * self.h
    
    def perimeter(self):
        return 2 * (self.w + self.h)
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(original, renamed)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Features: {result['features1']}")
    print(f"Weighted Score: {result['weighted_percentage']}")
    
    plagiarism = analyzer.detect_plagiarism(original, renamed, threshold=0.80)
    print(f"\nüîç Plagiarism Detected: {plagiarism['is_plagiarism']}")
    print(f"   Type: {plagiarism['plagiarism_type']}")
    print()


def test_extreme_obfuscation():
    """Test with heavily obfuscated code."""
    print("=" * 70)
    print("TEST 8: Extreme Obfuscation")
    print("=" * 70)
    
    original = """
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n - 1)
"""
    
    obfuscated = """
def compute(x):
    # This calculates something
    if x <= 1:
        # Base case
        return 1
    # Recursive call
    return x * compute(x - 1)
"""
    
    analyzer = HybridSimilarityAnalyzer()
    result = analyzer.analyze(original, obfuscated)
    
    print(f"Structure Similarity: {result['structure_similarity']:.1%}")
    print(f"Sequence Similarity: {result['sequence_similarity']:.1%}")
    print(f"Weighted Score: {result['weighted_percentage']}")
    print(f"Identical Structure: {result['identical_structure']}")
    
    plagiarism = analyzer.detect_plagiarism(original, obfuscated, threshold=0.75)
    print(f"\nüîç Plagiarism Detected: {plagiarism['is_plagiarism']}")
    print(f"   Type: {plagiarism['plagiarism_type']}")
    print()


def main():
    """Run all tests."""
    print("\n")
    print("üîç AST-BASED PLAGIARISM DETECTION TEST SUITE")
    print("=" * 70)
    print("Testing resilience against various obfuscation techniques")
    print("=" * 70)
    print()
    
    try:
        test_renamed_variables()
        test_reordered_functions()
        test_added_comments()
        test_different_implementations()
        test_control_flow_disguise()
        test_comparison_modes()
        test_class_similarity()
        test_extreme_obfuscation()
        
        print("=" * 70)
        print("‚úÖ ALL TESTS COMPLETED SUCCESSFULLY!")
        print("=" * 70)
        print("\nKey Findings:")
        print("‚úì AST-based analysis detects renamed variables effectively")
        print("‚úì Structural comparison is resilient to comments and formatting")
        print("‚úì Weighted scoring provides more accurate similarity assessment")
        print("‚úì Can distinguish between similar structure and genuinely different code")
        print()
        
    except Exception as e:
        print(f"‚ùå Error during testing: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
